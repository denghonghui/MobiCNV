##!/usr/local/bin/ python3.5
# coding: utf-8

# ==============================================================================

### IMPORT LIBRARIES
import sys		# system command
import csv		# read, write csv
import re		# regex
import argparse	# for options
import os		# for options
import pprint   # print data structure
import numpy as np
import math
import xlsxwriter
#from operator import itemgetter

# ==============================================================================

pp = pprint.PrettyPrinter(indent=4, depth=6)
#added david 27/03/2018 - deal with path passed as arg
parser = argparse.ArgumentParser(usage='python MobiCNV.py [-i PATH/TO/DoC_FILE/DIR/ -t (tsv|csv) -p PATH/TO/GENE/TXT/FILE -o PATH/TO/OUTPUT/FILE]', description='Compute CNV predictions from Illumina Depth of Coverage files (generated by MSR or LRM in DNA enrichment mode. Can also deal with samtools bedcov slightly modified files. Generates an Excel File with all computed values in Autosomes, X and Y sheets if relevant, in addition to a summary sheet which displays aberrant regions +- 1. Optionally, an additional panel sheet focuses on a list of genes passed as argument as a txt file (one gene per line).')
parser.add_argument('-i', '--input', default='.')
parser.add_argument('-p', '--panel', default='')
parser.add_argument('-t', '--type', default='csv')
parser.add_argument('-o', '--output', default='mobicnv.xlsx')
args = parser.parse_args()
#print(args.path)
#sys.exit()
#Path = "/Users/david/Downloads/henri_cnv/03_2018/170925H27JNL/"
Path = args.input
Panel = args.panel
Type = args.type
OutFile = args.output
ext = "csv"
delim = ","
if Type == "tsv":
	ext = "tsv"
	delim = "\t"
if Panel == '':
	Panel = False

filelist = os.listdir(Path)
number_of_file = 0
sample_name = []
counter = 0
dict_regions = {}
dict_patients = {}
dict_mean = {}
dict_gender = {}
total_mean = 0
dict_regions_ChrX = {}
dict_patients_ChrX = {}
total_mean_ChrX = 0
counter_ChrX = 0
dict_regions_ChrY = {}
dict_patients_ChrY = {}
total_mean_ChrY = 0
counter_ChrY = 0

print("\nFiles that will be considered:\n")


def build_dict(baseName, line, counter, dict_r, dict_p):
	if(baseName not in dict_p):
		dict_p[baseName] = {"sum_patient": float(line[4])}
	else:
		dict_p[baseName]["sum_patient"] += float(line[4])
	# création dictionnaire avec les valeurs bruts
	coordinate = (line[0],line[1],line[2], line[3])
	if coordinate not in dict_r :
		counter += 1
		dict_r[coordinate] = {baseName : {"brut" : float(line[4])}}
	else :
		dict_r[coordinate][baseName] = {"brut" : float(line[4])}	
	return(counter, dict_r, dict_p)

#############
for i in filelist:
	#### à fonctionnariser
	regex = re.compile(r'^([^\.].+)[\._]coverage\.%s$'%ext)
	matchObj = regex.search(os.path.basename(i))
	if(matchObj):
	#if i.endswith("coverage." + ext):  # You could also add "and i.startswith('f')
		print(i)
		number_of_file += 1
	#	regex = re.compile(r'^[^\.](.+)[\._]coverage\.[tc]sv$')
	#	matchObj = regex.search(os.path.basename(i))
	#	if(matchObj):
		baseName = matchObj.group(1)
		sample_name.append(baseName)
	#	else:
	#		sys.exit("Error [1] : file \'" + i + "\' does not respect format (sample.coverage.tsv).")
	####

		with open(Path + i, 'r') as csvfile:
			csvreader = csv.reader(csvfile, delimiter =delim)
			for line in csvreader:
				line = [w.replace(',', '.') for w in line]
				expression = r'^.*#.*$' # remove header
				if not re.match(expression, line[0]) and line[0] != "chrX" and line[0] != "chrY":
					(counter, dict_regions, dict_patients) = build_dict(baseName, line, counter, dict_regions, dict_patients)
					#création moyenne par patient
					#if(baseName not in dict_patients):
					#	dict_patients[baseName] = {"sum_patient": float(line[4])}
					#else:
					#	dict_patients[baseName]["sum_patient"] += float(line[4])
					# création dictionnaire avec les valeurs bruts
					#coordinate = (line[0],line[1],line[2], line[3])
					#if coordinate not in dict_regions :
					#	counter += 1
					#	dict_regions[coordinate] = {baseName : {"brut" : float(line[4])}}
					#else :
					#	dict_regions[coordinate][baseName] = {"brut" : float(line[4])}
				elif not re.match(expression, line[0]) and (line[0] == "chrX" or line[0] == "X"):
						(counter_ChrX, dict_regions_ChrX, dict_patients_ChrX) = build_dict(baseName, line, counter_ChrX, dict_regions_ChrX, dict_patients_ChrX)
				elif not re.match(expression, line[0]) and (line[0] == "chrY" or line[0] == "Y"):
						(counter_ChrY, dict_regions_ChrY, dict_patients_ChrY) = build_dict(baseName, line, counter_ChrY, dict_regions_ChrY, dict_patients_ChrY)
						# if(baseName not in dict_patients_ChrX):
						# 	dict_patients_ChrX[baseName] = {"sum_patient": float(line[4])}
						# else:
						# 	dict_patients_ChrX[baseName]["sum_patient"] += float(line[4])
						# # création dictionnaire avec les valeurs bruts
						# coordinate = (line[0],line[1],line[2],line[3])
						# if coordinate not in dict_regions_ChrX :
						# 	counter_ChrX += 1
						# 	dict_regions_ChrX[coordinate] = {baseName : {"brut" : float(line[4])}}
						# else :
						# 	dict_regions_ChrX[coordinate][baseName] = {"brut" : float(line[4])}
# faire pareil pour ChrY
#############

#############

# Itération sur le dictionnaire patient pour calculer la moyenne par  patient

# def sample_mean(dico):
# 	for sample_name in dict_patients:

for sample_name in dict_patients:
		dict_patients[sample_name]["moyenne_patient"] = dict_patients[sample_name]["sum_patient"]/ counter
# FOR X
if counter_ChrX > 0:
	for sample_name in dict_patients_ChrX:
			dict_patients_ChrX[sample_name]["moyenne_patient"] = dict_patients_ChrX[sample_name]["sum_patient"]/ counter_ChrX
			dict_gender[sample_name] = {"xratio": float(dict_patients_ChrX[sample_name]["moyenne_patient"] / dict_patients[sample_name]["moyenne_patient"]),
										"gender": "male"}
			if (dict_gender[sample_name]["xratio"] > 0.6):
				dict_gender[sample_name]["gender"] = "female"
if counter_ChrY > 0:
	for sample_name in dict_patients_ChrY:
			dict_patients_ChrY[sample_name]["moyenne_patient"] = dict_patients_ChrY[sample_name]["sum_patient"]/ counter_ChrY
			if dict_gender[sample_name]["gender"] != "male":
				print("\n\nWARNING Gender inconsistancy for " + sample_name + "reads on Y chr with X ration > 0.6\n\n")
				dict_gender[sample_name]["gender"] = "male/female"
		
#############
# Itération sur le dictionnaire patient pour calculer la moyenne par exon et l'exon normalisé

def exon_mean(dict_r, dict_m):
	for coordinate in dict_r :
		for sample_name in dict_r[coordinate]:
			total = 0
			full_total = 0
			sample_number = 0
			for sample_other in dict_r[coordinate]:
				if sample_other != sample_name:
					total += dict_r[coordinate][sample_other]['brut']
					sample_number +=1
				full_total += dict_r[coordinate][sample_other]['brut']
			#moyenne_exon = total / sample_number
			dict_m[coordinate] = {"exon_mean_doc": int(full_total / (sample_number+1))}
			dict_r[coordinate][sample_name]["moyenne_exon"] = float(total / sample_number)
	return(dict_r, dict_m)

(dict_regions, dict_mean) = exon_mean(dict_regions, dict_mean)
if counter_ChrX > 0:
	(dict_regions_ChrX, dict_mean) = exon_mean(dict_regions_ChrX, dict_mean)
if counter_ChrY > 0:
	(dict_regions_ChrY, dict_mean) = exon_mean(dict_regions_ChrY, dict_mean)
#pp.pprint(dict_regions)

# for coordinate in dict_regions :
# 	for sample_name in dict_regions[coordinate]:
# 		total = 0
# 		full_total = 0
# 		sample_number = 0
# 		for sample_other in dict_regions[coordinate]:
# 			if sample_other != sample_name:
# 				total += dict_regions[coordinate][sample_other]['brut']
# 				sample_number +=1
# 			full_total += dict_regions[coordinate][sample_other]['brut']
# 		moyenne_exon = total / sample_number
# 		dict_mean[coordinate] = {"exon_mean_doc": full_total / (sample_number+1)}
# 		dict_regions[coordinate][sample_name]["moyenne_exon"] = float(moyenne_exon)
# 
# # FOR X
# for coordinate in dict_regions_ChrX :
# 	for sample_name in dict_regions_ChrX[coordinate]:
# 		total = 0
# 		full_total = 0
# 		sample_number = 0
# 		for sample_other in dict_regions_ChrX[coordinate]:
# 			if sample_other != sample_name:
# 				total += dict_regions_ChrX[coordinate][sample_other]['brut']
# 				sample_number +=1
# 			full_total += dict_regions_ChrX[coordinate][sample_other]['brut']
# 		moyenne_exon = total / sample_number
# 		dict_mean[coordinate] = {"exon_mean_doc": full_total / (sample_number+1)}
# 		dict_regions_ChrX[coordinate][sample_name]["moyenne_exon"] = float(moyenne_exon)

#############
# Itération sur le dictionnaire régions pour calculer la somme moyenne par patient
# sauf pour les exons du patient - Somme ajoutée dans le dict patients


def compute_ratio(dict_p, dict_r, counter):
	for sample_name in dict_p:
		dict_p[sample_name]["somme_moyenne_exon"] = 0
		for coordinate in dict_r :
			#compute mean sum per exon
			dict_p[sample_name]["somme_moyenne_exon"] += dict_r[coordinate][sample_name]["moyenne_exon"]
		#mean for all samples except current sample
		dict_p[sample_name]["total_mean_sans_le_patient"] = dict_p[sample_name]["somme_moyenne_exon"] / counter
	for sample_name in dict_p:	
		for coordinate in dict_r :
			#normalisation per exon
			dict_r[coordinate][sample_name]["exon_normalise"] = dict_r[coordinate][sample_name]["moyenne_exon"] / dict_p[sample_name]["total_mean_sans_le_patient"]
	for coordinate in dict_r :	
		for sample_name in dict_r[coordinate]:
			#patient_normalise = dict_regions[coordinate][sample_name]['brut'] / dict_patients[sample_name]["moyenne_patient"]
			#normalisation per patient: exon DoC / mean all patients
			dict_r[coordinate][sample_name]["patient_normalise"] = float(dict_r[coordinate][sample_name]['brut'] / dict_p[sample_name]["moyenne_patient"])
	for coordinate in dict_r :
		for sample_name in dict_r[coordinate]:
			try :
				ratio_normalise = float(dict_r[coordinate][sample_name]["patient_normalise"]) / float(dict_r[coordinate][sample_name]["exon_normalise"])
			except ZeroDivisionError :
				ratio_normalise = float(0)
			dict_r[coordinate][sample_name]["ratio_normalise"] = float(ratio_normalise)
	return (dict_p, dict_r)

(dict_patients, dict_regions) = compute_ratio(dict_patients, dict_regions, counter)
if counter_ChrX > 0:
	(dict_patients_ChrX, dict_regions_ChrX) = compute_ratio(dict_patients_ChrX, dict_regions_ChrX, counter_ChrX)
if counter_ChrY > 0:
	(dict_patients_ChrY, dict_regions_ChrY) = compute_ratio(dict_patients_ChrY, dict_regions_ChrY, counter_ChrY)
#pp.pprint(dict_regions)
#pp.pprint(dict_regions_ChrX)
# 
# for sample_name in dict_patients:
# 	dict_patients[sample_name]["somme_moyenne_exon"] = 0
# 	for coordinate in dict_regions :
# 		dict_patients[sample_name]["somme_moyenne_exon"] += dict_regions[coordinate][sample_name]["moyenne_exon"]
# 	dict_patients[sample_name]["total_mean_sans_le_patient"] = dict_patients [sample_name]["somme_moyenne_exon"] / counter
# #for sample_name in dict_patients:
# #	dict_patients[sample_name]["total_mean_sans_le_patient"] = dict_patients [sample_name]["somme_moyenne_exon"] / counter
# 
# # FOR X
# for sample_name in dict_patients_ChrX:
# 	dict_patients_ChrX[sample_name]["somme_moyenne_exon"] = 0
# 	for coordinate in dict_regions_ChrX :
# 		dict_patients_ChrX[sample_name]["somme_moyenne_exon"] += dict_regions_ChrX[coordinate][sample_name]["moyenne_exon"]
# 	dict_patients_ChrX[sample_name]["total_mean_sans_le_patient"] = dict_patients_ChrX [sample_name]["somme_moyenne_exon"] / counter_ChrX
# 
# #for sample_name in dict_patients_ChrX:
# #	dict_patients_ChrX[sample_name]["total_mean_sans_le_patient"] = dict_patients_ChrX [sample_name]["somme_moyenne_exon"] / counter_ChrX
# 
# #############
# # Itération sur le dictionnaire régions pour ajouter la valeur "exon_normalise"
# # Moyenne exon / Moyenne tota
# #@@@@@@@@@@@@@@@@@@@
# #@@@@@@@@@@@@@@@@@@@
# #@@@@@@@@@@@@@@@@@@@
# #@@@@@@@@@@@@@@@@@@@
# for sample_name in dict_patients:
# 	for coordinate in dict_regions :
# 		dict_regions [coordinate][sample_name]["exon_normalise"] = dict_regions[coordinate][sample_name]["moyenne_exon"] / dict_patients[sample_name]["total_mean_sans_le_patient"]
# 
# # FOR X
# 
# for sample_name in dict_patients_ChrX:
# 	for coordinate in dict_regions_ChrX :
# 		dict_regions_ChrX [coordinate][sample_name]["exon_normalise"] = dict_regions_ChrX[coordinate][sample_name]["moyenne_exon"] / dict_patients_ChrX[sample_name]["total_mean_sans_le_patient"]
# 
# 
# 
# #############
# # Normalisation par patient : valeur couverture exon / moyenne patient
# 
# for coordinate in dict_regions :
# 	for sample_name in dict_regions[coordinate]:
# 		patient_normalise = dict_regions[coordinate][sample_name]['brut'] / dict_patients[sample_name]["moyenne_patient"]
# 		dict_regions[coordinate][sample_name]["patient_normalise"] = float(patient_normalise)
# 
# # FOR X
# 
# for coordinate in dict_regions_ChrX :
# 	for sample_name in dict_regions_ChrX[coordinate]:
# 		patient_normalise = dict_regions_ChrX[coordinate][sample_name]['brut'] / dict_patients_ChrX[sample_name]["moyenne_patient"]
# 		dict_regions_ChrX[coordinate][sample_name]["patient_normalise"] = float(patient_normalise)

#############

# Calcul ratio normalise

# def compute_ratio(dict_r):
# 	for coordinate in dict_r :
# 		for sample_name in dict_r[coordinate]:
# 			try :
# 				ratio_normalise = float(dict_r[coordinate][sample_name]["patient_normalise"]) / float(dict_r[coordinate][sample_name]["exon_normalise"])
# 			except ZeroDivisionError :
# 				ratio_normalise = float(0)
# 			dict_r[coordinate][sample_name]["ratio_normalise"] = float(ratio_normalise)
# 	return dict_r
# 
# dict_regions = compute_ratio(dict_regions)
# dict_regions_ChrX = compute_ratio(dict_regions_ChrX)


# for coordinate in dict_regions :
# 	for sample_name in dict_regions[coordinate]:
# 		try :
# 			ratio_normalise = float(dict_regions[coordinate][sample_name]["patient_normalise"]) / float(dict_regions[coordinate][sample_name]["exon_normalise"])
# 		except ZeroDivisionError :
# 			ratio_normalise = float(0)
# 		dict_regions[coordinate][sample_name]["ratio_normalise"] = float(ratio_normalise)
# # FOR X
# for coordinate in dict_regions_ChrX :
# 	for sample_name in dict_regions_ChrX[coordinate]:
# 		try :
# 			ratio_normalise = float(dict_regions_ChrX[coordinate][sample_name]["patient_normalise"]) / float(dict_regions_ChrX[coordinate][sample_name]["exon_normalise"])
# 		except ZeroDivisionError :
# 			ratio_normalise = float(0)
# 		dict_regions_ChrX[coordinate][sample_name]["ratio_normalise"] = float(ratio_normalise)

#pp.pprint(dict_patients)
#pp.pprint(dict_regions)
#dict_regions_sorted = sorted(dict_regions, key=lambda row:(row[0],int(row[1])), reverse=False)
#dict_regions_sorted = sorted(dict_regions, key=itemgetter(0,1)

def write_csv_file(file_in, file_out, dict_r, dict_m):
	with open(file_in, 'w') as csv_file:
		#csv.writer(csv_file)
		header = "Chr\tStart\tEnd\tRegionID\tMean DoC\t"
		for coordinate in dict_r :
			for sample_name in dict_r[coordinate]:
				header += str(sample_name) + "_brut" + "\t"
			for sample_name in dict_r[coordinate]:
			 	header += str(sample_name) + "_moy_exon" + "\t"
			for sample_name in dict_r[coordinate]:
			 	header += str(sample_name) + "_patient_normalise" + "\t"
			for sample_name in dict_r[coordinate]:
			 	header += str(sample_name) + "_exon_normalise" + "\t"
			for sample_name in dict_r[coordinate]:
			 	header += str(sample_name) + "_ratio" + "\t"
			break
		csv_file.write(header + "\n")
		for coordinate in dict_r :
			csv_file.write(
				str(coordinate[0]) + "\t" +
				str(coordinate[1]) + "\t" +
				str(coordinate[2]) + "\t" +
				str(coordinate[3]) + "\t" +
				str((dict_m[coordinate]["exon_mean_doc"])) + "\t"
				)
			for sample_name in dict_r[coordinate] :
				csv_file.write(str(dict_r[coordinate][sample_name]["brut"]) + "\t")
			for sample_name in dict_r[coordinate] :
				csv_file.write(str(round(dict_r[coordinate][sample_name]["moyenne_exon"], 2)) + "\t")
			for sample_name in dict_r[coordinate] :
				csv_file.write(str(round(dict_r[coordinate][sample_name]["patient_normalise"],2)) + "\t")
			for sample_name in dict_r[coordinate] :
				csv_file.write(str(round(dict_r[coordinate][sample_name]["exon_normalise"],2)) + "\t")
			for sample_name in dict_r[coordinate] :
				csv_file.write(str(round(dict_r[coordinate][sample_name]["ratio_normalise"],3)) + "\t")
			csv_file.write("\n")
	os.system("sort -k1.4n -k2,2n -k3,3n " + file_in + " > " + file_out)

write_csv_file('cnv_analysis.txt', 'cnv_analysis_sorted.txt', dict_regions, dict_mean)
if counter_ChrX > 0:
	write_csv_file('cnv_analysis_ChrX.txt', 'cnv_analysis_ChrX_sorted.txt', dict_regions_ChrX, dict_mean)
if counter_ChrY > 0:
	write_csv_file('cnv_analysis_ChrY.txt', 'cnv_analysis_ChrY_sorted.txt', dict_regions_ChrY, dict_mean)

# with open('cnv_analysis.txt', 'w') as csv_file:
# 	writer = csv.writer(csv_file)
# 	header = "Chr\tStart\tEnd\tRegionID\tMean DoC\t"
# 	for coordinate in dict_regions :
# 		for sample_name in dict_regions[coordinate]:
# 			header += str(sample_name) + "_brut" + "\t"
# 		for sample_name in dict_regions[coordinate]:
# 			header += str(sample_name) + "_moy_exon" + "\t"
# 		for sample_name in dict_regions[coordinate]:
# 			header += str(sample_name) + "_patient_normalise" + "\t"
# 		for sample_name in dict_regions[coordinate]:
# 			header += str(sample_name) + "_exon_normalise" + "\t"
# 		for sample_name in dict_regions[coordinate]:
# 			header += str(sample_name) + "_ratio" + "\t"
# 		break
# 	csv_file.write(header + "\n")
# 	for coordinate in dict_regions :
# 		csv_file.write(
# 			str(coordinate[0]) + "\t" +
# 			str(coordinate[1]) + "\t" +
# 			str(coordinate[2]) + "\t" +
# 			str(coordinate[3]) + "\t" +
# 			str(round(dict_mean[coordinate]["exon_mean_doc"], 2)) + "\t"
# 			)
# 		for sample_name in dict_regions[coordinate] :
# 			csv_file.write(str(dict_regions[coordinate][sample_name]["brut"]) + "\t")
# 		for sample_name in dict_regions[coordinate] :
# 			csv_file.write(str(round(dict_regions[coordinate][sample_name]["moyenne_exon"], 2)) + "\t")
# 		for sample_name in dict_regions[coordinate] :
# 			csv_file.write(str(round(dict_regions[coordinate][sample_name]["patient_normalise"],2)) + "\t")
# 		for sample_name in dict_regions[coordinate] :
# 			csv_file.write(str(round(dict_regions[coordinate][sample_name]["exon_normalise"],2)) + "\t")
# 		for sample_name in dict_regions[coordinate] :
# 			csv_file.write(str(round(dict_regions[coordinate][sample_name]["ratio_normalise"],3)) + "\t")
# 		csv_file.write("\n")

# with open('cnv_analysis_ChrX.txt', 'w') as csv_file:
# 	writer = csv.writer(csv_file)
# 	header = "Chr\tStart\tend\tRegionID\tMean DoC\t"
# 	for coordinate in dict_regions_ChrX :
# 		for sample_name in dict_regions_ChrX[coordinate]:
# 			header += str(sample_name) + "_brut" + "\t"
# 		for sample_name in dict_regions_ChrX[coordinate]:
# 			header += str(sample_name) + "_moy_exon" + "\t"
# 		for sample_name in dict_regions_ChrX[coordinate]:
# 			header += str(sample_name) + "_patient_normalise" + "\t"
# 		for sample_name in dict_regions_ChrX[coordinate]:
# 			header += str(sample_name) + "_exon_normalise" + "\t"
# 		for sample_name in dict_regions_ChrX[coordinate]:
# 			header += str(sample_name) + "_ratio" + "\t"
# 		break
# 	csv_file.write(header + "\n")
# 	for coordinate in dict_regions_ChrX :
# 		csv_file.write(
# 			str(coordinate[0]) + "\t" +
# 			str(coordinate[1]) + "\t" +
# 			str(coordinate[2]) + "\t" +
# 			str(coordinate[3]) + "\t" +
# 			str(round(dict_mean[coordinate]["exon_mean_doc"], 2)) + "\t"
# 			)
# 		for sample_name in dict_regions_ChrX[coordinate] :
# 			csv_file.write(str(dict_regions_ChrX[coordinate][sample_name]["brut"]) + "\t")
# 		for sample_name in dict_regions_ChrX[coordinate] :
# 			csv_file.write(str(round(dict_regions_ChrX[coordinate][sample_name]["moyenne_exon"], 2)) + "\t")
# 		for sample_name in dict_regions_ChrX[coordinate] :
# 			csv_file.write(str(round(dict_regions_ChrX[coordinate][sample_name]["patient_normalise"],2)) + "\t")
# 		for sample_name in dict_regions_ChrX[coordinate] :
# 			csv_file.write(str(round(dict_regions_ChrX[coordinate][sample_name]["exon_normalise"],2)) + "\t")
# 		for sample_name in dict_regions_ChrX[coordinate] :
# 			csv_file.write(str(round(dict_regions_ChrX[coordinate][sample_name]["ratio_normalise"],3)) + "\t")
# 		csv_file.write("\n")

# Sorting files, works on Mac only, if you are poor (like Charles) with other OS, go fuck yourself
#os.system("sort -k1.4n -k2,2n -k3,3n cnv_analysis.txt > cnv_analysis_sorted.txt")
#os.system("sort -k1.4n -k2,2n -k3,3n cnv_analysis_ChrX.txt > cnv_analysis_ChrX_sorted.txt")
#



###########
if (Panel != False):
	panel = open(Panel, 'r')
	# panelreader = csv.DictReader(panel, delimiter='\t')
	liste_panel = []
	for gene in panel :
		liste_panel.append(gene.rstrip())
###########


### Excel convertion


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
workbook = xlsxwriter.Workbook(OutFile)
#Define style of cells
style1 = workbook.add_format({'bold': True, 'bg_color': '#FF3333', 'locked' : True})
style2 = workbook.add_format({'bold': True, 'bg_color': '#FFC25E', 'locked' : True})
style3 = workbook.add_format({'bold': True, 'bg_color': '#5EBBFF', 'locked' : True})
style4 = workbook.add_format({'bold': True, 'bg_color': '#8F5EFF', 'locked' : True})
style5 = workbook.add_format({'bold': True, 'locked' : True})
style6 = workbook.add_format({'bold': True, 'num_format': 1, 'locked' : True})
style7 = workbook.add_format({'bold': True, 'color': '#F791E7', 'locked' : True})
style8 = workbook.add_format({'bold': True, 'color': '#5EBBFF', 'locked' : True})
#http://xlsxwriter.readthedocs.io/example_conditional_format.html#ex-cond-format
# Add a format. Light red fill with dark red text.
format1 = workbook.add_format({'bg_color': '#FFC7CE', 'font_color': '#9C0006'})
# Add a format. Green fill with dark green text.
format2 = workbook.add_format({'bg_color': '#C6EFCE', 'font_color': '#006100'})

# summary.freeze_panes(1, 5)
# summary.set_row(0, 20, style5)
# summary.set_column('A:E', 15, style5)
# summary.set_column('D:D', 25)
last_col = number_of_file*5 + 4
#sample number x number of data blocks + 5 first cols to show - 1 coz numbering begins at 0 (A = 0)
last_col_2_hide = number_of_file*4 + 4
#sample number x number of data blocks to hide + 5 first cols to show - 1 coz numbering begins at 0 (A = 0)

def format_sheet(sheet, last_col):
	sheet.freeze_panes(1, 5)
	sheet.set_row(0, 20, style5)
	sheet.set_column('A:E', 15, style5)
	sheet.set_column('D:D', 25)
	sheet.set_column('E:E', 15, style6)
	sheet.set_column(last_col+2, last_col+2, 15)
	sheet.set_column(last_col+3, last_col+3, 15)
	sheet.write(3, last_col+2, 'Legend:', style5)
	sheet.write(4, last_col+2, '', style1)
	sheet.write(5, last_col+2, '', style2)
	sheet.write(6, last_col+2, '', style3)
	sheet.write(7, last_col+2, '', style4)
	sheet.write(4, last_col+3, 'Homozygous deletion', style5)
	sheet.write(5, last_col+3, 'Heterozygous deletion', style5)
	sheet.write(6, last_col+3, 'Heterozygous duplication', style5)
	sheet.write(7, last_col+3, 'Homozygous duplication', style5)


#worksheet summary to get only interesting stuff
summary = workbook.add_worksheet(str("Summary"))
format_sheet(summary, last_col)

if (Panel != False):
	worksheet2 = workbook.add_worksheet(str("Panel"))
	format_sheet(worksheet2, last_col)
	# worksheet2.freeze_panes(1, 5)
	# worksheet2.set_row(0, 20, style5)
	# worksheet2.set_column('A:E', 15, style5)
	# worksheet2.set_column('D:D', 25)

def add_conditionnal_format(worksheet, threshold, start, end):
	#add a conditionnal format to raw DoC
	if (start == 0):
		start = 2
	cell_range = "E" + str(start) + ":T" + str(end)
	#http://xlsxwriter.readthedocs.io/working_with_conditional_formats.html
	#should work but does not: Excel does not recognize cell type as valid for 3 traffic lights- even using set_num_format
	worksheet.conditional_format(
		cell_range,
		{'type': 'icon_set',
		 'icon_style': '3_traffic_lights',
		 'icons': [{'criteria': '>=', 'type': 'number',     'value': 100},
				   {'criteria': '<=',  'type': 'number', 'value': threshold}]}
	)
	#xlsxwriter < 1.0.0 => cell formatting
# 	worksheet.conditional_format(cell_range, {'type': 'cell',
#                                           'criteria': '>=',
#                                           'value': threshold,
#                                           'format': format2})
# 	worksheet.conditional_format(cell_range, {'type': 'cell',
#                                           'criteria': '<',
#                                           'value': threshold,
#                                           'format': format1})

def write_small_worksheets(selected, start, first_row, small_worksheet, col_list, last_col, regex_r, threshold_del_hmz, threshold_del_htz, threshold_dup_htz, threshold_dup_hmz):
	#called inside writing_total to wirte summary and panel sheets
	i = 0
	uniq_selected = list(set(selected))
	for column in col_list:
		j = first_row
		if(start > 0):
			j = start
		for item in range(len(column)):
			if (item in uniq_selected):
				if regex_r.search(column[0]):
					if(item > 0):
						if(float(column[item]) <= threshold_del_hmz):
							small_worksheet.write(j, i , column[item],style1)
						elif(float(column[item]) <= threshold_del_htz):
							small_worksheet.write(j, i, column[item],style2)
						elif(float(column[item]) <= threshold_dup_htz):
							small_worksheet.write(j, i, column[item], style5)
						elif(float(column[item]) <= threshold_dup_hmz):
							small_worksheet.write(j, i, column[item],style3)
						else :
							small_worksheet.write(j, i, column[item],style4)
					else:
						small_worksheet.write(j, i, column[item], style5)
				else:
					try:
						small_worksheet.write(j,i,int(column[item]))
					except ValueError:
						small_worksheet.write(j,i,column[item])
				j+=1
		i+=1
	small_worksheet.write(9, last_col+2, "Sample ID", style5)
	small_worksheet.write(9, last_col+3, "Predicted Gender", style5)
	small_worksheet.write(9, last_col+4, "X ratio", style5)
	if counter_ChrX > 0 or counter_ChrY > 0:
		m = 10
		for sample_name in dict_gender:
			style = style8
			if dict_gender[sample_name]["gender"] == 'female':
				style = style7
			small_worksheet.write(m, last_col+2, sample_name, style)
			small_worksheet.write(m, last_col+3, dict_gender[sample_name]["gender"], style)
			small_worksheet.write(m, last_col+4, round(dict_gender[sample_name]["xratio"], 2), style)
			m += 1
	return (uniq_selected, j)



def writing_total(worksheet, txt_file, threshold_del_hmz, threshold_del_htz, threshold_dup_htz, threshold_dup_hmz, last_col_2_hide, last_col, start1=0, start2=0):
	# TODO: change it to parameter and save worksheet
	# if panel:

	worksheet = workbook.add_worksheet(str(worksheet))
	format_sheet(worksheet, last_col)
	# worksheet.freeze_panes(1, 5)
	# worksheet.set_row(0, 20, style5)
	# worksheet.set_column('A:E', 15, style5)
	# worksheet.set_column('D:D', 25)
	#structure data from txt
	f = open(str(txt_file), 'r+')
	row_list = []
	for row in f:
		row_list.append(row.split('\t'))
	# pp.pprint(row_list)

	column_list = zip(*row_list)
	column_list2 = zip(*row_list)
	column_list3 = zip(*row_list)
	i = 0
	l = 0
	interesting = []
	gene4interest = []
	regex_ratio = re.compile(r'(.*)_ratio$')
	regex_noCNV = re.compile(r'no CNV')
	regex_region = re.compile(r'RegionID')
	for column in column_list:
		for item in range(len(column)):
			if regex_region.search(column[0]):
				if (Panel != False):
					for gene in liste_panel:
						if re.compile(r'.*' + gene + '.*').search(column[item]) :
							# print (column[item])
							gene4interest.append(item)
				else:
					gene4interest.append(item)
			if regex_ratio.search(column[0]):
				if (item > 0) :
					if(float(column[item]) <= threshold_del_hmz):
						worksheet.write(item, i , column[item],style1)
						for k in range(item-1,item+2):
							if (k > 0):
								interesting.append(k)
					elif(float(column[item]) <= threshold_del_htz):
						worksheet.write(item, i, column[item],style2)
						for k in range(item-1,item+2):
							if (k > 0):
								interesting.append(k)
					elif(float(column[item]) <= threshold_dup_htz):
						worksheet.write(item, i, column[item], style5)
					elif(float(column[item]) <= threshold_dup_hmz):
						worksheet.write(item, i, column[item],style3)
						for k in range(item-1,item+2):
							if (k > 0):
								interesting.append(k)
					else :
						worksheet.write(item, i, column[item],style4)
						for k in range(item-1,item+2):
							if (k > 0):
								interesting.append(k)
				else:
					worksheet.write(item, i, column[item], style5)
			else:
				try:
					worksheet.write(item,i,int(column[item]))
				except ValueError:
					worksheet.write(item,i,column[item])
			if (item == 0):
				summary.write(item,i,column[item], style5)
				# if panel:
				if (Panel != False):
					worksheet2.write(item,i,column[item], style5)
		i+=1
	#i = 0
	(uniq_interesting, j) = write_small_worksheets(interesting, start1, 0, summary, column_list2, last_col, regex_ratio, threshold_del_hmz, threshold_del_htz, threshold_dup_htz, threshold_dup_hmz)
	if (Panel != False):
		(uniq_interesting_panel, l) = write_small_worksheets(gene4interest, start2, 1, worksheet2, column_list3, last_col,  regex_ratio, threshold_del_hmz, threshold_del_htz, threshold_dup_htz, threshold_dup_hmz)
		worksheet2.set_column(5,last_col_2_hide, None, None, {'level': 1, 'hidden': True})
		add_conditionnal_format(worksheet2, 50, start2, start2 + len(gene4interest))
	# uniq_interesting = list(set(interesting))
	# for column in column_list2:
	# 	j = 0
	# 	if(start1 > 0):
	# 		j = start1
	# 	for item in range(len(column)):
	# 		if (item in uniq_interesting):
	# 			if regex_ratio.search(column[0]):
	# 				if(item > 0):
	# 					if(float(column[item]) <= threshold_del_hmz):
	# 						summary.write(j, i , column[item],style1)
	# 					elif(float(column[item]) <= threshold_del_htz):
	# 						summary.write(j, i, column[item],style2)
	# 					elif(float(column[item]) <= threshold_dup_htz):
	# 						summary.write(j, i, column[item], style5)
	# 					elif(float(column[item]) <= threshold_dup_hmz):
	# 						summary.write(j, i, column[item],style3)
	# 					else :
	# 						summary.write(j, i, column[item],style4)
	# 				else:
	# 					summary.write(j, i, column[item], style5)
	# 			else:
	# 				summary.write(j,i,column[item])
	# 			j+=1
	# 	i+=1
	

	# i = 0
	# # part to dev
	# if (Panel != False):
	# 	#l=0
	# 	uniq_interesting_panel = list(set(gene4interest))
	# 	for column in column_list3:
	# 		l = 1
	# 		if (start2 > 0 ):
	# 			l = start2
	# 		for item in range(len(column)):
	# 			if (item in uniq_interesting_panel):
	# 				if regex_ratio.search(column[0]):
	# 					if(item > 0):
	# 						if(float(column[item]) <= threshold_del_hmz):
	# 							worksheet2.write(l, i , column[item],style1)
	# 						elif(float(column[item]) <= threshold_del_htz):
	# 							worksheet2.write(l, i, column[item],style2)
	# 						elif(float(column[item]) <= threshold_dup_htz):
	# 							worksheet2.write(l, i, column[item], style5)
	# 						elif(float(column[item]) <= threshold_dup_hmz):
	# 							worksheet2.write(l, i, column[item],style3)
	# 						else :
	# 							worksheet2.write(l, i, column[item],style4)
	# 					else:
	# 						worksheet2.write(l, i, column[item], style5)
	# 				else:
	# 					worksheet2.write(l,i,column[item])
	# 				l+=1
	# 		i+=1
	# 	i = 0
	# 	worksheet2.set_column('F:BM', None, None, {'level': 1, 'hidden': True})
	# 	add_conditionnal_format(worksheet2, 50, start2, start2 + len(gene4interest))
	worksheet.set_column('F:BM', None, None, {'level': 1, 'hidden': True})
	worksheet.set_column(5, last_col_2_hide, None, None, {'level': 1, 'hidden': True})
	add_conditionnal_format(worksheet, 50, 2, len(row_list))
	worksheet.protect()
	summary.set_column(5, last_col_2_hide, None, None, {'level': 1, 'hidden': True})
	add_conditionnal_format(summary, 50, start1, start1 + len(uniq_interesting))
	return (j,l)

#worksheet for autosomes
(start1, start2) = writing_total('Autosomes','cnv_analysis.txt', 0.3, 0.7, 1.3, 1.7, last_col_2_hide, last_col)
# print (start1, start2)
#worksheet for ChrX
start3 = 0
start4 = 0
if counter_ChrX > 0:
	(start3, start4) = writing_total('Chromosome_X','cnv_analysis_ChrX_sorted.txt', 0.3, 0.7, 1.3, 1.7, last_col_2_hide, last_col, start1, start2)
if counter_ChrY > 0:
	if start3 > 0 and start4 > 0:
		writing_total('Chromosome_Y','cnv_analysis_ChrY_sorted.txt', 0.3, 0.7, 1.3, 1.7, last_col_2_hide, last_col, start3, start4)
	else:
		writing_total('Chromosome_Y','cnv_analysis_ChrY_sorted.txt', 0.3, 0.7, 1.3, 1.7, last_col_2_hide, last_col, start1, start2)

if (Panel != False):
	worksheet2.protect()
summary.protect()
workbook.close()
#remove temporary files
os.system("rm cnv_analysis.txt cnv_analysis_sorted.txt cnv_analysis_ChrX.txt cnv_analysis_ChrX_sorted.txt")
print("\nDone!!!\n")
